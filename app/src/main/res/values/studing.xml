<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="devActiv">Как <b>активировать</b> опцию разработчика?</string>



<string name="first">Режим разработчика на Android планшетах и телефонах добавляет набор специальных функций в настройки устройства, предназначенные для разработчиков, но иногда востребованные обычными пользователями устройств (например, для включения отладки по USB и последующего восстановления данных, установки кастомного рекавери, записи экрана с помощью команд adb shell и других целей).</string>
<string name="second">Включение режима разработчика на телефонах и планшетах с Android 6, 7 и более ранних версий происходит одинаково.</string>
    <string name="third"><u>Необходимые шаги для того, чтобы в меню появился пункт «Для разработчиков»</u></string>
    <string name="four1"><b>1. Зайдите в настройки и внизу списка откройте пункт «О телефоне» или «О планшете».</b></string>
    <string name="four2"><b>2. В конце списка с данными о вашем устройстве найдите пункт «Номер сброки» (для некоторых телефонов, например, MEIZU — «Версия MIUI»).</b></string>
    <string name="four3"><b>3. Начните многократно нажимать по этому пункту. Во время этого (но не с первых нажатий) будут появляться уведомления о том, что вы на верном пути к тому чтобы включить режим разработчика (разные уведомления на разных версиях андроида).</b></string>
    <string name="four4"><b>4. В конце процесса вы увидите сообщение «Вы стали разработчиком!» — это означает, что режим разработчика Android был успешно включен.</b> </string>
    <string name="fifth">Теперь, чтобы зайти в параметры режима разработчика вы можете открыть «Настройки» — «Для разработчиков» или «Настройки» — «Дополнительно» — «Для разработчиков» (на Meizu, ZTE и некоторых других). Может потребоваться дополнительно перевести переключатель режима разработчика в положение «Вкл».</string>
    <string name="six">Теоретически, на каких-то моделях устройств с сильно модифицированной операционной системой, способ может не сработать, однако мне пока такого видеть не доводилось (успешно срабатывало и при измененных интерфейсах настроек на некоторых китайских телефонах).</string>



    <string name="mfapp">Android Studio и создание первого проекта</string>


    <string name="mfapp1">Теперь создадим первое приложение в среде Android Studio для операционной системы Android. Откроем Android Studio и на начальном экране выберем пункт <b>Start new Android Project</b></string>
    <string name="mfapp2">(Если Android Studio уже запускалась, то в меню надо выбрать пункт <b>File -> New-> New Project...</b>). После этого отобразится диалоговое окно создания нового проекта:</string>
    <string name="mfapp3">В окне создания нового проекта мы можем установить его начальные настройки:</string>
    <string name="mfapp4">-В поле <b>Application Name</b> вводится название приложения. Укажем в качестве имени название HelloApplication</string>
    <string name="mfapp5">-В поле <b>Company Domain</b> указывается домен приложения или тот пакет классов, где будет размещаться главный класс приложения. Лучше также сразу задать какое-нибудь свое значение в поле Company Domain. Дело в том, что когда вы будете размещать приложение в магазине Google Play, то значение для этого поля должно быть уникальным для всего магазина. Хотя для тестовых проектов, как в данном случае, можно оставить в этом поле значеие по умолчанию.</string>
    <string name="mfapp6">-В поле <b>Project Location</b> можно установить расположение файлов проекта на жестком диске</string>
    <string name="mfapp7">Далее нажмем на кнопку Next и перейдем к следующему шагу:</string>
    <string name="mfapp8">На этом шаге будет предложено установить минимальную поддерживаемую версию проекта. По умолчанию устанавливается версия Android 4.1, что покрывает более 95% устройств Android. Оставим по умолчанию и нажмем на кнопку Next. На следующем шаге надо выбрать шаблон проекта:</string>
    <string name="mfapp9">Android Studio предоставляет ряд шаблонов для различных ситуаций, но самымми распространенными являются Basic Activity и Empty Activity. Это самые удобные шаблоны для старта для создания большинства приложений. В данном случае мы выберем шаблон Empty Activity. При выборе Empty Activity на следующем шаге надо установить ряд настроек проекта:</string>

    <string name="mfapp10"> <u>Activity Name</u>: название главного класса приложения</string>

    <string name="mfapp11"><u>Layout Name:</u> название файла xml, в котором будет храниться определение визуального интерфейса</string>

    <string name="mfapp12"><u>Generate Layout File:</u> надо ли генерировать файл xml с определением визуального интерфейса</string>

    <string name="mfapp13"><u>Backwards Compatibility (AppCompat):</u> в отмеченном состоянии позволяет установить обратную зависимость между различными версиями Android</string>

    <string name="mfapp14">Оставим все настройки по умолчанию и нажмем на кнопку <b>Finish</b>. И через некоторое время Android Studio создаст и откроет проект</string>
    <string name="mfapp15" formatted="true" >          <center><b>Структура проекта</b>        </center></string>
    <string name="mfapp16" formatted="true"> Проект Android может состоять из различных модулей. По умолчанию, когда мы создаем проект, создается один модуль - app. Модуль имеет три подпапки:</string>

    <string name="mfapp17" formatted="true">  -<b>manifests:</b> хранит файл манифеста AndroidManifest.xml, который определяет конфигурацию</string>

    <string name="mfapp18" formatted="true">  -<b>java:</b> хранит файлы кода на языке java, которые структурированы по отдельным пакетам</string>

    <string name="mfapp19" formatted="true">  -<b>res:</b> содержит используемые в приложении ресурсы</string>

    <string name="mfapp20" formatted="true">    Отдельный элемент <b>Gradle Scripts</b> содержит ряд скриптов gradle (как для модуля app или других возможных модулей, так и для всего проекта), которые используются при построении приложения.
    Каждый модуль имеет свой файл <b>build.gradle</b>, который определяет конфгурацию построения проекта, специфичную для данного модуля. Так, если мы посмотрим на содержимое папки app, то как раз найдем в ней такой файл. На начальном этапе данные файлы не столь важны, достаточно лишь понимать, для чего они нужны.</string>



<string name="stropr">Структура Android-проекта</string>

    <string name="stropr1">Если посмотреть на дефолтную панель в левой части <u>Android Studio</u>, вы увидите следующую картину: </string>
    <string name="stropr2">В manifests сгруппированы манифесты наших модулей. <i>AndroidManifest</i> — одна из ключевых частей приложения. Манифест описывает, из каких <i>«частей»</i> состоит приложение. Он представляет собой XML-файл, в котором описаны разрешения приложения (о них мы поговорим в следующих уроках), «экраны», сервисы, метаданные и т. д. Пример <b>AndroidManifest.xml</b> из пустого проекта:</string>
    <string name="stropr3">Далее в дереве мы видим исходники на Java. Они разделены на две части — непосредственно код, и код для тестов.</string>
    <string name="stropr4">Следом идут ресурсы (директория res) — в них находятся изображения, текст, аудиофайлы, и прочие вещи, которые мы будем использовать в приложении.

        На самом деле, структура <b>Android-проекта</b> выглядит несколько иначе, просто Android Studio специально группирует файлы так, чтобы нам с ними было удобно работать.</string>
    <string name="stropr5">Чтобы увидеть реальное дерево файлов, нужно выбрать вкладку «Project»: </string>
    <string name="stropr6">И тогда мы увидим такую картину: </string>
    <string name="stropr7"><u>Немного иначе выглядит, не так ли?</u> </string>
    <string name="stropr8">По факту, ничего сложного в такой структуре нет, да и она нам, в принципе, особо не понадобится, так что рекомендую переключиться обратно во вкладку «Android». </string>




    <string name="manifest"> Android Manifest</string>


    <string name="manifest1">В корневой папке каждого приложения должен находиться файл <u>AndroidManifest.xml</u> (который именно так и называется ). Файл манифеста содержит важную информацию о приложении, которая требуется системе Android. Только получив эту информацию, система может выполнить какой-либо код приложения. Среди прочего файл манифеста выполняет следующие действия:</string>
    <string name="manifest2"> -Он задает имя пакета Java для приложения. Это имя пакета служит уникальным идентификатором приложения.</string>
    <string name="manifest3"> -Он описывает компоненты приложения — операции, службы, приемники широковещательных сообщений и поставщиков контента, из которых состоит приложение. Он содержит имена классов, которые реализуют каждый компонент, и публикует их возможности (указывает, например, какие сообщения Intent они могут принимать). На основании этих деклараций система Android может определить, из каких компонентов состоит приложение и при каких условиях их можно запускать.</string>
    <string name="manifest4"> -Он определяет, в каких процессах будут размещаться компоненты приложения.</string>
    <string name="manifest5"> -Он объявляет, какие разрешения должны быть выданы приложению, чтобы оно могло получить доступ к защищенным частям API-интерфейса и взаимодействовать с другими приложениями.</string>
    <string name="manifest6"> -Он также объявляет разрешения, требуемые для взаимодействия с компонентами данного приложения.</string>
    <string name="manifest7"> -Он содержит список классов Instrumentation, которые при выполнении приложения предоставляют сведения о профиле и прочую информацию. Эти объявления присутствуют в файле манифеста только во время разработки и отладки приложения и удаляются перед его публикацией.</string>
    <string name="manifest8"> -Он объявляет минимальный уровень API-интерфейса Android, который требуется приложению.</string>
    <string name="manifest9"> -Он содержит список библиотек, с которыми должно быть связано приложение.</string>
    <string name="manifest10"> <b>Структура файла манифеста</b></string>
    <string name="manifest11"> Корневым элементом манифеста является "manifest". Помимо данного элемента обязательными элементами является теги "application" и "uses-sdk". Элемент "application" является основным элементом манифеста и содержит множество дочерних элементов, определяющих структуру и работу приложения. Порядок расположения элементов, находящихся на одном уровне, произвольный. Все значения устанавливаются через атрибуты элементов. Кроме обязательных элементов, упомянутых выше, в манифесте по мере необходимости используются другие элементы.</string>
    <string name="manifest12"> <b>Установка версии SDK</b></string>

    <string name="manifest13"> Для управления версией android sdk в файле манифеста определяется элемент "uses-sdk". Он может использовать следующие атрибуты:</string>
    <string name="manifest14"> <u>minSdkVersion: минимальная поддерживаемая версия SDK</u></string>
    <string name="manifest15"> <u>targetSdkVersion: оптимальная версия</u></string>
    <string name="manifest16"> <u>maxSdkVersion: максимальная версия</u></string>
    <string name="manifest17">  Приложение в зависимости от положения гаджета может находиться в альбомной и портретной ориентации. Не всегда это бывает удобно. Мы можем сделать, чтобы приложение вне зависимости от поворота гаджета использовало только одну ориентацию. Для этого в файле манифеста у требуемой activity надо установить атрибут <b>android:screenOrientation</b>. Например, запретим альбомную ориентацию: </string>
    <string name="manifest18"> <u>Значение <b>android:screenOrientation="portrait"</b> указывает, что данная activity будет находиться только в портретной ориентации. Если же надо установить только альбомную ориентацию, тогда надо использовать значение <b>android:screenOrientation="landscape"</b></u></string>

</resources>